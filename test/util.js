/* eslint-env mocha */
const assert = require('assert')
const slackValidateRequest = require('..')


// Test object. Simulate an express request object
const slackSigningSecret = '8f742231b10e8888abcd99yyyzzz85a5'
let testHttpRequest

/**
 * Runs a set of tests against an HTTP request
 * object generated by the given framework
 * @param {string} frameworkName
 * @param {function} getTestHttpRequest 
 */
function runTests(frameworkName, getTestHttpRequest) {
    describe(`${frameworkName} request test`, function () {
        describe('Basic test', async function () {
            it('should return true with test object', async function () {
            assert.equal(await slackValidateRequest(slackSigningSecret, getTestHttpRequest()), true)
            })
        })
        
        describe('Test multiple args', function () {
            it('should return true', async function () {
            assert.equal(await slackValidateRequest(slackSigningSecret, getTestHttpRequest('args1 args2')), true)
            })
        })
        
        describe('Test special characters in command', function() {
            it('should return true', async function() {
            testHttpRequest = getTestHttpRequest('(!)')
            testHttpRequest.headers['x-slack-signature'] = 'v0=85b7bd32a59380ae4a50db6d76eed906f36daec1660ceced4907f44eaaf60757'
            assert.equal(await slackValidateRequest('slackSigningSecret', testHttpRequest), true)
            })
        })
        
        describe('Wrong signature', function () {
            it('should return false if the signature doesn\'t match', async function () {
            testHttpRequest = getTestHttpRequest()
            testHttpRequest.headers['x-slack-signature'] = 'v0=a2114d57b58eac39b9ad189dd8316235a7b4a8d21a10bd27519666489c69b503'
            assert.equal(await slackValidateRequest(slackSigningSecret, testHttpRequest), false)
            })
        })
        
        describe('Wrong Signing Secret', function () {
            it('should return false if the signing secret is not the correct one', async function () {
            var tmpSlackSigningSecret = '9f742231b10e8888abcd99yyyzzz85a5'
            assert.equal(await slackValidateRequest(tmpSlackSigningSecret, getTestHttpRequest()), false)
            })
        })
        
        describe('Wrong Timestamp', function () {
            it('should return false if the timestamp is wrong', async function () {
            testHttpRequest = getTestHttpRequest()
            testHttpRequest.headers['x-slack-request-timestamp'] = '1531420619'
            assert.equal(await slackValidateRequest(slackSigningSecret, testHttpRequest), false)
            })
        })
        
        describe('Wrong body', function () {
            it('should return false if the body is not the correct one', async function () {
            testHttpRequest = getTestHttpRequest()
            testHttpRequest.body.text = 'test'
            assert.equal(await slackValidateRequest(slackSigningSecret, testHttpRequest), false)
            })
        })
        
        describe('Using an invalid slack request', function () {
            it('should return false', async function () {
            testHttpRequest = getTestHttpRequest()
            delete testHttpRequest.headers['x-slack-request-timestamp']
            delete testHttpRequest.headers['x-slack-signature']
            assert.equal(await slackValidateRequest(slackSigningSecret, testHttpRequest), false)
            })
        })
        
        describe('Using invalid slack app signing secret', function() {
            it('should throw an error if it\'s undfined', async function() {
            testHttpRequest = getTestHttpRequest()
            assert.rejects(async () => { await slackValidateRequest(undefined, testHttpRequest) })
            })
            it('should throw an error if it\'s an empty string', async function() {
            testHttpRequest = getTestHttpRequest()
            assert.rejects(async () => { await slackValidateRequest('', testHttpRequest) })
            })
            it('should throw an error if it\'s a non-string', async function() {
            testHttpRequest = getTestHttpRequest()
            assert.rejects(async () => { await slackValidateRequest(12344, testHttpRequest) })
            })
        })
        
        describe('Check validity of logging argument', function() {
            it('should throw an error if logging is not a boolean', async function() {
            testHttpRequest = getTestHttpRequest()
            assert.rejects(async () => { await slackValidateRequest(slackSigningSecret, testHttpRequest, 1) })
            })
        })
        })
}

module.exports = runTests